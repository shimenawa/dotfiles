{
  "name": "anymatch",
  "version": "0.2.0",
  "description": "Matches strings against configurable strings, globs, regular expressions, and/or functions",
  "author": {
    "name": "Elan Shanker",
    "url": "http://github.com/es128"
  },
  "homepage": "https://github.com/es128/anymatch",
  "repository": {
    "type": "git",
    "url": "git@github.com:es128/anymatch.git"
  },
  "bugs": {
    "url": "https://github.com/es128/anymatch/issues"
  },
  "main": "lib",
  "keywords": [
    "match",
    "any",
    "string",
    "file",
    "fs",
    "list",
    "glob",
    "regex",
    "regexp",
    "regular",
    "expression",
    "function"
  ],
  "dependencies": {
    "minimatch": "~0.2.12"
  },
  "scripts": {
    "prepublish": "rm -rf lib && coffee --bare --output lib/ src/",
    "test": "rm -rf lib && coffee --bare --output lib/ src/ && istanbul test _mocha -- test/test.* --compilers coffee:coffee-script/register"
  },
  "license": "MIT",
  "devDependencies": {
    "coffee-script": "~1.7.1",
    "mocha": "~1.17.1",
    "istanbul": "~0.2.4"
  },
  "readme": "anymatch\n======\nJavascript module to match a string against a regular expression, glob, string,\nor function that takes the string as an argument and returns a truthy or falsy\nvalue. The matcher can also be an array of any or all of these. Useful for\nallowing a very flexible user-defined config to define things like file paths.\n\nUsage\n-----\n`npm install anymatch --save`\n\n#### anymatch (matchers, testString, [returnIndex], [startIndex], [endIndex])\n* __matchers__: (_Array|String|RegExp|Function_)\nString to be directly matched, string with glob patterns, regular expression\ntest, function that takes the testString as an argument and returns a truthy\nvalue if it should be matched, or an array of any number and mix of these types.\n* __testString__: (_String_) The string to test against the matchers.\n* __returnIndex__: (_Boolean [optional]_) If true, return the array index of\nthe first matcher that that testString matched, or -1 if no match, instead of a\nboolean result.\n* __startIndex, endIndex__: (_Integer [optional]_) Can be used to define a\nsubset out of the array of provided matchers to test against. Can be useful\nwith bound matcher functions (see below). When used with `returnIndex = true`\npreserves original indexing. Behaves the same as `Array.prototype.slice` (i.e.\nincludes array members up to, but not including endIndex).\n\n```js\nvar anymatch = require('anymatch');\n\nvar matchers = [\n\t'path/to/file.js',\n\t'path/anyjs/**/*.js',\n\t/foo.js$/,\n\tfunction (string) {\n\t\treturn string.indexOf('bar') !== -1 && string.length > 10\n\t}\n];\n\nanymatch(matchers, 'path/to/file.js'); // true\nanymatch(matchers, 'path/anyjs/baz.js'); // true\nanymatch(matchers, 'path/to/foo.js'); // true\nanymatch(matchers, 'path/to/bar.js'); // true\nanymatch(matchers, 'bar.js'); // false\n\n// returnIndex = true\nanymatch(matchers, 'foo.js', true); // 2\nanymatch(matchers, 'path/anyjs/foo.js', true); // 1\n\n// skip matchers\nanymatch(matchers, 'path/to/file.js', false, 1); // false\nanymatch(matchers, 'path/anyjs/foo.js', true, 2, 3); // 2\nanymatch(matchers, 'path/to/bar.js', true, 0, 3); // -1\n```\n\n#### anymatch.matcher (matchers)\nYou can also use the `matcher` method to get a function that has already been\nbound to your matcher(s). This can be used as an `Array.prototype.filter`\ncallback.\n\n```js\nvar matcher = anymatch.matcher(matchers);\n\nmatcher('path/to/file.js'); // true\nmatcher('path/anyjs/baz.js', true); // 1\nmatcher('path/anyjs/baz.js', true, 2); // -1\n\n['foo.js', 'bar.js'].filter(matcher); // ['foo.js']\n```\n\nLicense\n-------\n[MIT](https://raw.github.com/es128/anymatch/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "anymatch@0.2.0",
  "dist": {
    "shasum": "fdbb6f336d9f2d3dd60648ad6cbf3dc7a0228e85"
  },
  "_from": "anymatch@~0.2.0",
  "_resolved": "https://registry.npmjs.org/anymatch/-/anymatch-0.2.0.tgz"
}
